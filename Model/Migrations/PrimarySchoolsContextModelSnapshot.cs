// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(PrimarySchoolsContext))]
    partial class PrimarySchoolsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Agency", b =>
                {
                    b.Property<long>("AgencyID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgencyAddress");

                    b.Property<string>("AgencyName");

                    b.HasKey("AgencyID");

                    b.ToTable("Agencies");

                    b.HasData(
                        new { AgencyID = 1L, AgencyAddress = "Hà Nội", AgencyName = "Mầm non đơm hoa CS1" },
                        new { AgencyID = 2L, AgencyAddress = "Hà Nội", AgencyName = "Mầm non đơm hoa CS2" },
                        new { AgencyID = 3L, AgencyAddress = "Hà Nội", AgencyName = "Mầm non đơm hoa CS3" },
                        new { AgencyID = 4L, AgencyAddress = "Hà Nội", AgencyName = "Mầm non đơm hoa CS4" }
                    );
                });

            modelBuilder.Entity("Model.Attendance", b =>
                {
                    b.Property<long>("AttendanceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AttendanceBy");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("Status");

                    b.Property<long>("StudentID");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("AttendanceID");

                    b.HasIndex("AttendanceBy");

                    b.HasIndex("StudentID");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("Model.FunctionCode", b =>
                {
                    b.Property<long>("FunctionCodeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Code");

                    b.Property<string>("Description");

                    b.HasKey("FunctionCodeID");

                    b.ToTable("FunctionCodes");
                });

            modelBuilder.Entity("Model.FunctionUsergroupDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FunctionCodeID");

                    b.Property<long>("UsergroupID");

                    b.HasKey("Id");

                    b.HasIndex("FunctionCodeID");

                    b.HasIndex("UsergroupID");

                    b.ToTable("FunctionUsergroupDetails");
                });

            modelBuilder.Entity("Model.SchoolClass", b =>
                {
                    b.Property<long>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AgencyID");

                    b.Property<string>("ClassName");

                    b.Property<long>("CreateBy");

                    b.Property<DateTime>("CreateDate");

                    b.HasKey("ClassID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("CreateBy");

                    b.ToTable("SchoolClasses");

                    b.HasData(
                        new { ClassID = 1L, AgencyID = 1L, ClassName = "Lớp 1-2 tuổi", CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { ClassID = 2L, AgencyID = 1L, ClassName = "Lớp 2-3 tuổi", CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { ClassID = 3L, AgencyID = 2L, ClassName = "Lớp 4-5 tuổi", CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { ClassID = 4L, AgencyID = 2L, ClassName = "Lớp 1-2 tuổi", CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { ClassID = 5L, AgencyID = 3L, ClassName = "Lớp 1-2 tuổi", CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Model.Student", b =>
                {
                    b.Property<long>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ClassID");

                    b.Property<long?>("CreateBy");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<bool>("Gender");

                    b.Property<long?>("ParrentID");

                    b.Property<string>("PhotoPath");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<string>("StudentName");

                    b.HasKey("StudentID");

                    b.HasIndex("ClassID");

                    b.HasIndex("CreateBy");

                    b.HasIndex("ParrentID");

                    b.ToTable("Students");

                    b.HasData(
                        new { StudentID = 1L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 1L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Bùi Minh Anh" },
                        new { StudentID = 2L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 2L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Nguyễn Mạnh Hải" },
                        new { StudentID = 3L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 3L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Bùi Mạnh Tùng" },
                        new { StudentID = 4L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 4L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Tô Minh Nguyệt" },
                        new { StudentID = 5L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 5L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Trần Hải Anh" },
                        new { StudentID = 6L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 6L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Lê Nguyễn Ánh Dương" },
                        new { StudentID = 7L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 7L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Bùi Minh Đức" },
                        new { StudentID = 8L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 8L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Bùi Anh Tùng" },
                        new { StudentID = 9L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 9L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Bùi Mạnh Tường" },
                        new { StudentID = 10L, ClassID = 2L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 1L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Nguyễn Mạnh An" },
                        new { StudentID = 11L, ClassID = 2L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 2L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Lê Minh Ngọc" },
                        new { StudentID = 12L, ClassID = 2L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 3L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Đào Việt Linh" },
                        new { StudentID = 13L, ClassID = 2L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 4L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Bùi Thái Nhất Linh" },
                        new { StudentID = 14L, ClassID = 2L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 5L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Trần Quang Huy" },
                        new { StudentID = 15L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 6L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Nguyễn Ngọc Huy" },
                        new { StudentID = 16L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 7L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Lê Minh Sơn" },
                        new { StudentID = 17L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 8L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Trịnh Công Sơn" },
                        new { StudentID = 18L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 9L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Lê Minh Quang" },
                        new { StudentID = 19L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 1L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Phạm Hùng" },
                        new { StudentID = 20L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 2L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Nguyễn Trí Kiên" },
                        new { StudentID = 21L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 3L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Lê Minh Hải" },
                        new { StudentID = 22L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 4L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Bùi Hưng Kiên" },
                        new { StudentID = 23L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 5L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Tạ Minh Hải" },
                        new { StudentID = 24L, ClassID = 1L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 6L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Nguyễn Minh An" },
                        new { StudentID = 25L, ClassID = 3L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 7L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Tạ Quang Thắng" },
                        new { StudentID = 26L, ClassID = 3L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 8L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Tạ Bình An" },
                        new { StudentID = 27L, ClassID = 3L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 9L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Lê Minh Hoa" },
                        new { StudentID = 28L, ClassID = 3L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 1L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Nguyễn Cát Phượng" },
                        new { StudentID = 29L, ClassID = 3L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 2L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Tô Hải Lâm" },
                        new { StudentID = 30L, ClassID = 3L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 3L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Nguyễn Mạnh Lâm" },
                        new { StudentID = 31L, ClassID = 3L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 4L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Lê Thị Thu" },
                        new { StudentID = 32L, ClassID = 3L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 5L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Nguyễn Bất Thành" },
                        new { StudentID = 33L, ClassID = 3L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 6L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Bùi Duy Tùng" },
                        new { StudentID = 34L, ClassID = 3L, CreateBy = 1L, CreateDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfBirth = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentID = 7L, PhotoPath = "/Avarta/boy.png", StartDate = new DateTime(2018, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), Status = 1, StudentName = "Nguyễn Văn An" }
                    );
                });

            modelBuilder.Entity("Model.StudentParrent", b =>
                {
                    b.Property<long>("ParrentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<long>("CreateBy");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("Gender");

                    b.Property<string>("ParrentName");

                    b.Property<string>("Phone");

                    b.HasKey("ParrentID");

                    b.HasIndex("CreateBy");

                    b.ToTable("StudentParrents");

                    b.HasData(
                        new { ParrentID = 1L, Address = "Hà Nội", CreateBy = 1L, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentName = "Nguyễn Mạnh An", Phone = "0358466789" },
                        new { ParrentID = 2L, Address = "Hà Nội", CreateBy = 1L, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentName = "Bùi Duy Tùng", Phone = "0358466789" },
                        new { ParrentID = 3L, Address = "Hà Nội", CreateBy = 1L, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentName = "Nguyễn Tường Anh", Phone = "0358466789" },
                        new { ParrentID = 4L, Address = "Hà Nội", CreateBy = 1L, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentName = "Tô Nguyệt Anh", Phone = "0358466789" },
                        new { ParrentID = 5L, Address = "Hà Nội", CreateBy = 1L, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentName = "Bùi Minh Đức", Phone = "0358466789" },
                        new { ParrentID = 6L, Address = "Hà Nội", CreateBy = 1L, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentName = "Lò Thị Anh Minh", Phone = "0358466789" },
                        new { ParrentID = 7L, Address = "Hà Nội", CreateBy = 1L, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentName = "Tô Minh Diệu", Phone = "0358466789" },
                        new { ParrentID = 8L, Address = "Hà Nội", CreateBy = 1L, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentName = "Bùi Anh Mạnh", Phone = "0358466789" },
                        new { ParrentID = 9L, Address = "Hà Nội", CreateBy = 1L, CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = true, ParrentName = "Tăng Nhật Minh", Phone = "0358466789" }
                    );
                });

            modelBuilder.Entity("Model.TeacherClassDetails", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ClassID");

                    b.Property<long?>("TeacherID");

                    b.HasKey("id");

                    b.HasIndex("ClassID");

                    b.HasIndex("TeacherID");

                    b.ToTable("TeacherClassDetails");
                });

            modelBuilder.Entity("Model.Tuition", b =>
                {
                    b.Property<long>("TuitionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClassID");

                    b.Property<string>("TuitionName");

                    b.Property<decimal>("TuitionValue");

                    b.HasKey("TuitionID");

                    b.HasIndex("ClassID")
                        .IsUnique();

                    b.ToTable("Tuitions");
                });

            modelBuilder.Entity("Model.Usergroup", b =>
                {
                    b.Property<long>("UsergroupID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("UsergroupName");

                    b.HasKey("UsergroupID");

                    b.ToTable("Usergroups");
                });

            modelBuilder.Entity("Model.UserTeacher", b =>
                {
                    b.Property<long>("TeacherID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("Status");

                    b.Property<string>("TeacherName");

                    b.Property<long>("UserGroupId");

                    b.Property<string>("Username");

                    b.HasKey("TeacherID");

                    b.ToTable("UserTeachers");

                    b.HasData(
                        new { TeacherID = 1L, Address = "HN", Password = "21232f297a57a5a743894a0e4a801fc3", PhoneNumber = "0123", Status = true, TeacherName = "Teacher 1", UserGroupId = 1L, Username = "admin" },
                        new { TeacherID = 2L, Address = "HN", Password = "e10adc3949ba59abbe56e057f20f883e", PhoneNumber = "0123", Status = true, TeacherName = "Teacher 1", UserGroupId = 1L, Username = "teacher_1" },
                        new { TeacherID = 3L, Address = "HN", Password = "e10adc3949ba59abbe56e057f20f883e", PhoneNumber = "0123", Status = true, TeacherName = "Teacher 1", UserGroupId = 1L, Username = "teacher_2" },
                        new { TeacherID = 4L, Address = "HN", Password = "e10adc3949ba59abbe56e057f20f883e", PhoneNumber = "0123", Status = true, TeacherName = "Teacher 1", UserGroupId = 1L, Username = "teacher_3" }
                    );
                });

            modelBuilder.Entity("Model.Attendance", b =>
                {
                    b.HasOne("Model.UserTeacher", "UserTeacher")
                        .WithMany("Attendance")
                        .HasForeignKey("AttendanceBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Student", "Student")
                        .WithMany("Attendance")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.FunctionUsergroupDetails", b =>
                {
                    b.HasOne("Model.FunctionCode", "FunctionCode")
                        .WithMany("FunctionUsergroupDetails")
                        .HasForeignKey("FunctionCodeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Usergroup", "Usergroup")
                        .WithMany("FunctionUsergroupDetails")
                        .HasForeignKey("UsergroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.SchoolClass", b =>
                {
                    b.HasOne("Model.Agency", "Agency")
                        .WithMany("SchoolClass")
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.UserTeacher", "UserTeacher")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Student", b =>
                {
                    b.HasOne("Model.SchoolClass", "SchoolClass")
                        .WithMany("Student")
                        .HasForeignKey("ClassID");

                    b.HasOne("Model.UserTeacher", "UserTeacher")
                        .WithMany("Student")
                        .HasForeignKey("CreateBy");

                    b.HasOne("Model.StudentParrent", "StudentParrent")
                        .WithMany("Student")
                        .HasForeignKey("ParrentID");
                });

            modelBuilder.Entity("Model.StudentParrent", b =>
                {
                    b.HasOne("Model.UserTeacher", "UserTeacher")
                        .WithMany("StudentParrent")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.TeacherClassDetails", b =>
                {
                    b.HasOne("Model.SchoolClass", "SchoolClass")
                        .WithMany("TeacherClassDetails")
                        .HasForeignKey("ClassID");

                    b.HasOne("Model.UserTeacher", "UserTeacher")
                        .WithMany("TeacherClassDetail")
                        .HasForeignKey("TeacherID");
                });

            modelBuilder.Entity("Model.Tuition", b =>
                {
                    b.HasOne("Model.SchoolClass", "SchoolClass")
                        .WithOne("Tuition")
                        .HasForeignKey("Model.Tuition", "ClassID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
